package selective_wines;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import javax.swing.*;

public class SWMenu extends JFrame implements ActionListener, MouseListener 
{

	private JMenuBar jmb;
	private JMenu product,stock,report,system;
	private JMenuItem addProd,editProd,delProd,dispStock,sale, stockRep, salesRep, eSystem;
	private Container cn;
	private JPanel panel;
	private JScrollPane jsp, jsp2;
	private JLabel pic;
	private JTextArea left, right;
	private ImageIcon logo = new ImageIcon("resource/logo.jpg"); // create logo for program
	private Add_Product add; // add product form
	private Display_Stock display; // Display stock form
	private Sales_Rep saleRep; // sales report form
	private Edit_Product edit;
	private Delete_Product delete;

	Font sml = new Font("Arial", Font.BOLD,16); // create fonts used on the menu form
	Font lrg = new Font("Arial", Font.BOLD,18);

	private static HashMap<String, Product> stockItems = new HashMap<String, Product> (50); // HashMap to hold stock for easy access and updating.
	private static LinkedList<Sales> sales = new LinkedList<Sales>();  // Linked list to hold the sales, more efficient for growing list of unknown size

	private int pID = 10000;
	
	File Stock = new File("Stock"); // creating file for Read and write methods
	File Sales = new File("Sales");

	public SWMenu() // menu for constructor
	{
		cn= getContentPane();
		cn.setBackground(Color.WHITE);  // container
		
		jmb = new JMenuBar();
		jmb.addMouseListener(this);
		jmb.setBackground(Color.decode("#8F0B23")); //Menu bar

		product = new JMenu("Product"); // menu option
		product.setFont(lrg); //
		product.setBackground(Color.decode("#8F0B23"));
		product.setForeground(Color.white);

		stock = new JMenu("Stock"); // stock menu option
		stock.setFont(lrg);
		stock.setBackground(Color.decode("#8F0B23"));
		stock.setForeground(Color.white);

		report = new JMenu("Reports"); // reports menu option
		report.setFont(lrg);
		report.setBackground(Color.decode("#8F0B23"));
		report.setForeground(Color.white);

		system = new JMenu("System"); // system menu option
		system.setFont(lrg);
		system.setBackground(Color.decode("#8F0B23"));
		system.setForeground(Color.white);

		addProd = new JMenuItem("Add Product");  // add product menu option
		addProd.setFont(sml);
		addProd.setBackground(Color.decode("#F9F9F9"));
		addProd.setForeground(Color.BLACK);
		addProd.addActionListener(this);
		product.add(addProd);

		editProd = new JMenuItem("Edit Product"); // Edit product menu option
		editProd.setFont(sml);
		editProd.setBackground(Color.decode("#F9F9F9"));
		editProd.setForeground(Color.BLACK);
		editProd.addActionListener(this);
		product.add(editProd);

		delProd = new JMenuItem("Delete Product"); // Delete product menu option
		delProd.setFont(sml);
		delProd.setBackground(Color.decode("#F9F9F9"));
		delProd.setForeground(Color.BLACK);
		delProd.addActionListener(this);
		product.add(delProd);

		dispStock = new JMenuItem("Display Stock"); // Display Stock menu option
		dispStock.setFont(sml);
		dispStock.setBackground(Color.decode("#F9F9F9"));
		dispStock.setForeground(Color.BLACK);
		dispStock.addActionListener(this);
		stock.add(dispStock);

		sale = new JMenuItem("Make Sale"); // make sale menu option
		sale.setFont(sml);
		sale.setBackground(Color.decode("#F9F9F9"));
		sale.setForeground(Color.BLACK);
		sale.addActionListener(this);
		stock.add(sale);

		/*stockRep = new JMenuItem("Stock Report"); // stock report menu option
		stockRep.setFont(sml);
		stockRep.setBackground(Color.decode("#F9F9F9"));
		stockRep.setForeground(Color.BLACK);
		stockRep.addActionListener(this);
		report.add(stockRep);*/

		salesRep = new JMenuItem("Sales Report"); // sales menu option
		salesRep.setFont(sml);
		salesRep.setBackground(Color.decode("#F9F9F9"));
		salesRep.setForeground(Color.BLACK);
		salesRep.addActionListener(this);
		report.add(salesRep);

		eSystem = new JMenuItem("Exit");  // exit menu option
		eSystem.setFont(sml);
		eSystem.setBackground(Color.decode("#F9F9F9"));
		eSystem.setForeground(Color.BLACK);
		eSystem.addActionListener(this);
		system.add(eSystem); 
		
		panel = new JPanel(new BorderLayout());// create panel to hold Picture and text fields
		panel.addMouseListener(this);

		pic = new JLabel(logo); // add logo to the JLable 
		pic.setPreferredSize(new Dimension(600, 600)); // set size
		
		left = new JTextArea();
		left.setPreferredSize(new Dimension(295, 300));
		right = new JTextArea(); // creating text field
		right.setPreferredSize(new Dimension(295, 300));
		
		jsp = new JScrollPane(left);
		jsp2 = new JScrollPane(right);
		
		panel.add(pic,BorderLayout.NORTH); // add Picture
		panel.add(jsp, BorderLayout.EAST);
		panel.add(jsp2, BorderLayout.WEST);// adding text fields
		
		cn.add(panel); // add panel to the container
		
		jmb.add(product);  // add menu options to the menu bar
		jmb.add(stock);
		jmb.add(report);
		jmb.add(system);

		setJMenuBar(jmb); //set the JMenu to the container

		ReadStock();
		ReadSales();

		//Menu option forms

		// add product form.
		add = new Add_Product(stockItems, pID); // pass stock #map to add form
		add.setTitle("Add Product");
		add.setSize(500,600);
		add.setLocation(100,100);
		
		//Display/Report Stock form
		display = new Display_Stock(stockItems); // pass stock #map to display form
		display.setTitle("Display Stock");
		display.setSize(1000,600);
		display.setLocation(100,100);
		
		// sales report form
		saleRep = new Sales_Rep(sales); // pass sales linked list to sales form
		saleRep.setTitle("Sales Report");
		saleRep.setSize(1000,600);
		saleRep.setLocation(100,100);
		
		 // edit product form.
		edit = new Edit_Product(stockItems); // pass stock #map to add form
		edit.setTitle("Edit Product");
		edit.setSize(500,700);
		edit.setLocation(100,100);
		
		delete = new Delete_Product(stockItems); // pass stock #map to add form
		delete.setTitle("Delete Product");
		delete.setSize(500,700);
		delete.setLocation(100,100);
	}


	public void actionPerformed(ActionEvent e) // set actions for the menu bar option buttons
	{
		if(e.getSource() == addProd)
		{
			add.setVisible(true);
		}

		if(e.getSource() == editProd)
		{
			edit.setVisible(true);
		}

		if(e.getSource() == delProd)
		{
			delete.setVisible(true);
		}

		if(e.getSource() == dispStock)
		{
			display.setVisible(true);
		}

		if(e.getSource() == sale)
		{

		}

		/*if(e.getSource() == stockRep)
		{

		}*/

		if(e.getSource() == salesRep)
		{
			saleRep.setVisible(true);
		}

		if(e.getSource() == eSystem)
		{
			WriteStock();
			WriteSales();
			System.exit(0);
		}

	}

	public void ReadStock()
	{
		try{
			FileInputStream fis = new FileInputStream("Stock");
			ObjectInputStream ois = new ObjectInputStream(fis);
			stockItems = (HashMap<String, Product>) ois.readObject();
			ois.close();
			fis.close();
		}
		catch(ClassNotFoundException cEx)
		{
			JOptionPane.showMessageDialog(null, "The contents of Stock.dat could not be read");
		}
		catch(FileNotFoundException fEx)
		{
			JOptionPane.showMessageDialog(null, "Stock.dat: File not found");
		}
		catch(IOException ioEx)
		{
			JOptionPane.showMessageDialog(null, "Could not read from Stock.dat");
		}
		
		Iterator i = stockItems.entrySet().iterator();
		// Loop through the items (see notes)
		
		while (i.hasNext())
		{
			pID++;
			i.next();
		}
	}

	public void ReadSales()
	{
		try{
			FileInputStream fis = new FileInputStream("Sales");
			ObjectInputStream ois = new ObjectInputStream(fis);
			sales = (LinkedList<Sales>) ois.readObject();
			ois.close();
			fis.close();
		}
		catch(ClassNotFoundException cEx)
		{
			JOptionPane.showMessageDialog(null, "The contents of Sales.dat could not be read");
		}
		catch(FileNotFoundException fEx)
		{
			JOptionPane.showMessageDialog(null, "Sales.dat: File not found");
		}
		catch(IOException ioEx)
		{
			JOptionPane.showMessageDialog(null, "Could not read from Sales.dat");
		}
	}

	public void WriteStock()
	{
		try{
			FileOutputStream fos = new FileOutputStream(Stock);
			ObjectOutputStream oos = new ObjectOutputStream(fos);
			oos.writeObject(stockItems);
			oos.close();
			fos.close();
		}

		catch(FileNotFoundException fEx)
		{
			JOptionPane.showMessageDialog(null, "Stock.dat: File not found");
		}
		catch(IOException ioEx)
		{
			JOptionPane.showMessageDialog(null, "Could not write to Stock.dat");
		}
	}

	public void WriteSales()
	{
		try{
			FileOutputStream fos = new FileOutputStream(Sales);
			ObjectOutputStream oos = new ObjectOutputStream(fos);
			oos.writeObject(sales);
			oos.close();
			fos.close();
		}

		catch(FileNotFoundException fEx)
		{
			JOptionPane.showMessageDialog(null, "Sales.dat: File not found");
		}
		catch(IOException ioEx)
		{
			JOptionPane.showMessageDialog(null, "Could not write to Sales.dat");
		}
	}
	
	public static void setFocus()
	{
		
	}


	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub
		left.append("Sucess");
	}


	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}


}
